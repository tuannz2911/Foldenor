From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Tue, 6 Aug 2024 19:52:02 +0400
Subject: [PATCH] Purpur-Lobotomize-stuck-villagers


diff --git a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
index fbc0835c8e3cafc678275334a378369207c9a6b1..4801dc90dbb3863beda1f0b89e6d30b8c0d20b0d 100644
--- a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
+++ b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
@@ -51,6 +51,12 @@ public class FoldenorConfig {
 
     public static boolean skipMapItemUpdatesIfNoBukkitRender = true;
 
+    // Purpur Villager lobotomize
+    public static boolean villagerLobotomizeEnabled = false;
+    public static boolean villagerLobotomizeWaitUntilTradeLocked = false;
+    public static int villagerLobotomizeCheckInterval = 100;
+    // Purpur Villager lobotomize
+
     public static void init(File configFile) {
         init(configFile, true);
     }
@@ -125,6 +131,10 @@ public class FoldenorConfig {
         piglinSpawnChancePersentInPortal = getInt("optimizations.piglin-spawn-chance-persent-in-portal", 100,
             "Reduces piglin spawn in portal, by reducing change to spawn");
         skipMapItemUpdatesIfNoBukkitRender = getBoolean("optimizations.skip_map_item_updates_if_no_bukkit_render", skipMapItemUpdatesIfNoBukkitRender);
+
+        villagerLobotomizeEnabled = getBoolean("optimizations.villager-lobotomize.enabled", villagerLobotomizeEnabled);
+        villagerLobotomizeWaitUntilTradeLocked = getBoolean("optimizations.villager-lobotomize.wait-until-trade-locked", villagerLobotomizeWaitUntilTradeLocked);
+        villagerLobotomizeCheckInterval = getInt("optimizations.villager-lobotomize.check-interval", villagerLobotomizeCheckInterval);
     }
 
     private static void readMiscSettings() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 3f4e4b612e127e51b240bca8776f6fc3743bd2d7..c3a470220b4be29896deb56c4eadd33395047507 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -18,6 +18,8 @@ import java.util.Set;
 import java.util.function.BiPredicate;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import net.edenor.foldenor.config.FoldenorConfig;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.core.Holder;
@@ -143,6 +145,10 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         return holder.is(PoiTypes.MEETING);
     });
 
+    private boolean isLobotomized = false;
+    public boolean isLobotomized() { return this.isLobotomized; } // Purpur
+    private int notLobotomizedCount = 0; // Purpur
+
     public long nextGolemPanic = -1; // Pufferfish
 
     public Villager(EntityType<? extends Villager> entityType, Level world) {
@@ -158,6 +164,48 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         this.setVillagerData(this.getVillagerData().setType(type).setProfession(VillagerProfession.NONE));
     }
 
+    private boolean checkLobotomized() {
+        int interval = FoldenorConfig.villagerLobotomizeCheckInterval;
+        boolean shouldCheckForTradeLocked = FoldenorConfig.villagerLobotomizeWaitUntilTradeLocked;
+        if (this.notLobotomizedCount > 3) {
+            // check half as often if not lobotomized for the last 3+ consecutive checks
+            interval *= 2;
+        }
+        if (this.level().getGameTime() % interval == 0) {
+            // offset Y for short blocks like dirt_path/farmland
+            this.isLobotomized = !(shouldCheckForTradeLocked && this.getVillagerXp() == 0) && !canTravelFrom(BlockPos.containing(this.position().x, this.getBoundingBox().minY + 0.0625D, this.position().z));
+
+            if (this.isLobotomized) {
+                this.notLobotomizedCount = 0;
+            } else {
+                this.notLobotomizedCount++;
+            }
+        }
+        return this.isLobotomized;
+    }
+
+    private boolean canTravelFrom(BlockPos pos) {
+        return canTravelTo(pos.east()) || canTravelTo(pos.west()) || canTravelTo(pos.north()) || canTravelTo(pos.south());
+    }
+
+    private boolean canTravelTo(BlockPos pos) {
+        net.minecraft.world.level.block.state.BlockState state = this.level().getBlockStateIfLoaded(pos);
+        if (state == null) {
+            // chunk not loaded
+            return false;
+        }
+        net.minecraft.world.level.block.Block bottom = state.getBlock();
+        if (bottom instanceof net.minecraft.world.level.block.FenceBlock ||
+            bottom instanceof net.minecraft.world.level.block.FenceGateBlock ||
+            bottom instanceof net.minecraft.world.level.block.WallBlock) {
+            // bottom block is too tall to get over
+            return false;
+        }
+        net.minecraft.world.level.block.Block top = level().getBlockState(pos.above()).getBlock();
+        // only if both blocks have no collision
+        return !bottom.hasCollision && !top.hasCollision;
+    }
+
     @Override
     public Brain<Villager> getBrain() {
         return (Brain<Villager>) super.getBrain(); // CraftBukkit - decompile error
@@ -255,13 +303,19 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         // Paper start
         this.customServerAiStep(false);
     }
-    protected void customServerAiStep(final boolean inactive) {
+    protected void customServerAiStep(boolean inactive) {
         // Paper end
         this.level().getProfiler().push("villagerBrain");
         // Pufferfish start
+        if (FoldenorConfig.villagerLobotomizeEnabled) {
+            // treat as inactive if lobotomized
+            inactive = inactive || checkLobotomized();
+        } else {
+            this.isLobotomized = false;
+        }
         if (!inactive && this.behaviorTick++ % this.activatedPriority == 0) {
             this.getBrain().tick((ServerLevel) this.level(), this); // Paper
-        }
+        } else if (this.isLobotomized && shouldRestock()) restock();
         // Pufferfish end
         this.level().getProfiler().pop();
         if (this.assignProfessionWhenSpawned) {
@@ -379,14 +433,9 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
     private void resetSpecialPrices() {
         if (!this.level().isClientSide()) {
-            Iterator iterator = this.getOffers().iterator();
-
-            while (iterator.hasNext()) {
-                MerchantOffer merchantrecipe = (MerchantOffer) iterator.next();
-
+            for (MerchantOffer merchantrecipe : this.getOffers()) {
                 merchantrecipe.resetSpecialPriceDiff();
             }
-
         }
     }
 
@@ -402,11 +451,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
     public void restock() {
         this.updateDemand();
-        Iterator iterator = this.getOffers().iterator();
-
-        while (iterator.hasNext()) {
-            MerchantOffer merchantrecipe = (MerchantOffer) iterator.next();
-
+        for (MerchantOffer merchantrecipe : this.getOffers()) {
             // CraftBukkit start
             VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((org.bukkit.entity.Villager) this.getBukkitEntity(), merchantrecipe.asBukkit());
             Bukkit.getPluginManager().callEvent(event);
@@ -477,11 +522,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         int i = 2 - this.numberOfRestocksToday;
 
         if (i > 0) {
-            Iterator iterator = this.getOffers().iterator();
-
-            while (iterator.hasNext()) {
-                MerchantOffer merchantrecipe = (MerchantOffer) iterator.next();
-
+            for (MerchantOffer merchantrecipe : this.getOffers()) {
                 // CraftBukkit start
                 VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((org.bukkit.entity.Villager) this.getBukkitEntity(), merchantrecipe.asBukkit());
                 Bukkit.getPluginManager().callEvent(event);
@@ -500,11 +541,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
 
     private void updateDemand() {
-        Iterator iterator = this.getOffers().iterator();
-
-        while (iterator.hasNext()) {
-            MerchantOffer merchantrecipe = (MerchantOffer) iterator.next();
-
+        for (MerchantOffer merchantrecipe : this.getOffers()) {
             merchantrecipe.updateDemand();
         }
 
@@ -514,10 +551,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         int i = this.getPlayerReputation(player);
 
         if (i != 0) {
-            Iterator iterator = this.getOffers().iterator();
-
-            while (iterator.hasNext()) {
-                MerchantOffer merchantrecipe = (MerchantOffer) iterator.next();
+            for (MerchantOffer merchantrecipe : this.getOffers()) {
                 if (merchantrecipe.ignoreDiscounts) continue; // Paper - Add ignore discounts API
 
                 merchantrecipe.addToSpecialPriceDiff(-Mth.floor((float) i * merchantrecipe.getPriceMultiplier()));
@@ -527,10 +561,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (player.hasEffect(MobEffects.HERO_OF_THE_VILLAGE)) {
             MobEffectInstance mobeffect = player.getEffect(MobEffects.HERO_OF_THE_VILLAGE);
             int j = mobeffect.getAmplifier();
-            Iterator iterator1 = this.getOffers().iterator();
-
-            while (iterator1.hasNext()) {
-                MerchantOffer merchantrecipe1 = (MerchantOffer) iterator1.next();
+            for (MerchantOffer merchantrecipe1 : this.getOffers()) {
                 if (merchantrecipe1.ignoreDiscounts) continue; // Paper - Add ignore discounts API
                 double d0 = 0.3D + 0.0625D * (double) j;
                 int k = (int) Math.floor(d0 * (double) merchantrecipe1.getBaseCostA().getCount());
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 46c4a33c4cb82049aa60fc7fc47707dcbd8c733e..186fea0b916103e4f5220be7e3a05ac0a82e6b52 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -382,4 +382,10 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
         getHandle().getGossips().gossips.clear();
     }
     // Paper end
+
+    // Purpur start
+    public boolean isLobotomized() {
+        return getHandle().isLobotomized();
+    }
+    // Purpur end
 }
