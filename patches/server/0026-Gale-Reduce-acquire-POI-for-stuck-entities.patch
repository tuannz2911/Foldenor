From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Tue, 6 Aug 2024 15:36:28 +0400
Subject: [PATCH] Gale-Reduce-acquire-POI-for-stuck-entities


diff --git a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
index 8e901c59e1310d70552b3853d3f5e721aad71a79..f8618b1b7d3ecddd5ac9e1057167050a610f8e54 100644
--- a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
+++ b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
@@ -41,6 +41,8 @@ public class FoldenorConfig {
 
     public static boolean appleskinProtocol = false;
 
+    public static int acquirePoiForStuckEntity = 60;
+
     public static void init(File configFile) {
         init(configFile, true);
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
index e1b6fe9ecda25f86431baf414f1bfd3a26a8b2bd..fe26be2f2a6ec2791fb9b86cb0c829a9b687f8a5 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
@@ -13,6 +13,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.core.Holder;
 import net.minecraft.network.protocol.game.DebugPackets;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.PathfinderMob;
@@ -26,6 +27,13 @@ import org.apache.commons.lang3.mutable.MutableLong;
 public class AcquirePoi {
     public static final int SCAN_RANGE = 48;
 
+    // Gale start - Airplane - reduce acquire POI for stuck entities
+    public static void addAdditionalTimeToMutableLongIfEntityIsStuck(MutableLong mutableLong, ServerLevel world, PathfinderMob entity) {
+        long stuckEntityAdditionalWaitTime = net.edenor.foldenor.config.FoldenorConfig.acquirePoiForStuckEntity;
+        mutableLong.add(stuckEntityAdditionalWaitTime <= 0L ? 0L : entity.getNavigation().isStuck() ? stuckEntityAdditionalWaitTime : 0L);
+    }
+    // Gale end - Airplane - reduce acquire POI for stuck entities
+
     public static BehaviorControl<PathfinderMob> create(
         Predicate<Holder<PoiType>> poiPredicate, MemoryModuleType<GlobalPos> poiPosModule, boolean onlyRunIfChild, Optional<Byte> entityStatus
     ) {
@@ -51,13 +59,13 @@ public class AcquirePoi {
                                 if (onlyRunIfChild && entity.isBaby()) {
                                     return false;
                                 } else if (mutableLong.getValue() == 0L) {
-                                    mutableLong.setValue(world.getGameTime() + (long)world.random.nextInt(20));
+                                    addAdditionalTimeToMutableLongIfEntityIsStuck(mutableLong, world, entity); // Gale - Airplane - reduce acquire POI for stuck entities
                                     return false;
                                 } else if (world.getGameTime() < mutableLong.getValue()) {
                                     return false;
                                 } else {
                                     mutableLong.setValue(time + 20L + (long)world.getRandom().nextInt(20));
-                                    if (entity.getNavigation().isStuck()) mutableLong.add(200); // Paper - Perf: Wait an additional 10s to check again if they're stuck
+                                    addAdditionalTimeToMutableLongIfEntityIsStuck(mutableLong, world, entity); // Paper - Perf: Wait an additional 10s to check again if they're stuck // Gale - Airplane - reduce acquire POI for stuck entities
                                     PoiManager poiManager = world.getPoiManager();
                                     long2ObjectMap.long2ObjectEntrySet().removeIf(entry -> !entry.getValue().isStillValid(time));
                                     Predicate<BlockPos> predicate2 = pos -> {
