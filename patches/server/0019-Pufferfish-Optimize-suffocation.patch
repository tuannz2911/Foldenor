From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AltronMaxX <max06112004@gmail.com>
Date: Tue, 6 Aug 2024 14:15:52 +0400
Subject: [PATCH] Pufferfish-Optimize-suffocation


diff --git a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
index c8c6631093ff2ebd23527e80778b35f9c44cc8bf..8c8101d47376b9fb13652869401494c8b605620e 100644
--- a/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
+++ b/src/main/java/net/edenor/foldenor/config/FoldenorConfig.java
@@ -25,6 +25,8 @@ public class FoldenorConfig {
 
     public static boolean sendNullEntityPackets = false;
 
+    public static boolean enableSuffocationOptimization = false;
+
     public static void init(File configFile) {
         init(configFile, true);
     }
@@ -67,6 +69,8 @@ public class FoldenorConfig {
     static void readConfig() {
         readNetworkSettings();
 
+        readOptimizationSettings();
+
         try {
             config.save(CONFIG_FILE);
         } catch (IOException ex) {
@@ -78,6 +82,14 @@ public class FoldenorConfig {
         sendNullEntityPackets = getBoolean("network.send-null-entity-packets", sendNullEntityPackets);
     }
 
+    private static void readOptimizationSettings() {
+        enableSuffocationOptimization = getBoolean("optimizations.enable-suffocation-optimization", true,
+                "Optimizes the suffocation check by selectively skipping",
+                "the check in a way that still appears vanilla. This should",
+                "be left enabled on most servers, but is provided as a",
+                "configuration option if the vanilla deviation is undesirable.");
+    }
+
     protected static void set(String path, Object val) {
         config.addDefault(path, val);
         config.set(path, val);
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index b4fec6374803534aa3b5d5e7aec64f68c7c7c356..873e9b488a14866c99779a5b5e5f3d1c211febd6 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -463,7 +463,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
         if (this.isAlive()) {
             boolean flag = this instanceof net.minecraft.world.entity.player.Player;
 
-            if (!this.level().isClientSide) {
+            if (shouldCheckForSuffocation() && this.isInWall()) { // Pufferfish - optimize suffocation
                 if (this.isInWall()) {
                     this.hurt(this.damageSources().inWall(), 1.0F);
                 } else if (flag && !this.level().getWorldBorder().isWithinBounds(this.getBoundingBox())) {
@@ -1428,6 +1428,16 @@ public abstract class LivingEntity extends Entity implements Attackable {
         return this.getHealth() <= 0.0F;
     }
 
+    // Pufferfish start - optimize suffocation
+    public boolean couldPossiblyBeHurt(float amount) {
+        return !((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F) || !(amount <= this.lastHurt);
+    }
+
+    public boolean shouldCheckForSuffocation() {
+        return !net.edenor.foldenor.config.FoldenorConfig.enableSuffocationOptimization || (tickCount % 10 == 0 && couldPossiblyBeHurt(1.0F));
+    }
+    // Pufferfish end
+
     @Override
     public boolean hurt(DamageSource source, float amount) {
         if (this.isInvulnerableTo(source)) {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index d3b4d492aee380dc17f4232d90eaae4f07bb9f86..82921c56c49edb0ca07425da563aa4876d4e6fb1 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -154,6 +154,13 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
         this.bossEvent.setName(this.getDisplayName());
     }
 
+    // Pufferfish start - optimize suffocation
+    @Override
+    public boolean shouldCheckForSuffocation() {
+        return true;
+    }
+    // Pufferfish end
+
     @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.WITHER_AMBIENT;
